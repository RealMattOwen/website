---
import * as Sentry from "@sentry/astro";
import { API_KEY_TICKETS } from "astro:env/server";
import { getEntry } from "astro:content";
import { getInviteUrls } from "../../../../../utils";

export const prerender = false;

const { eventId, ticketId, token } = Astro.params;
if (!eventId || !ticketId || !token) {
  Sentry.captureMessage("Access non-existing event.");
  return Astro.redirect("/404");
}

const entry = await getEntry("events", eventId);
if (entry === undefined) {
  Sentry.captureMessage("Access non-existing event.");
  return Astro.redirect("/404");
}

const {
  data: { id, name, description, dateStart, dateEnd, location },
} = entry;

const inviteUrls = getInviteUrls({
  id,
  name,
  description,
  location,
  dateStart,
  dateEnd,
});

const dateStartParsed = dateStart.toLocaleDateString("en-GB", {
  weekday: "long",
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
  hour: "2-digit",
  minute: "2-digit",
});

try {
  const response = await fetch("https://tickets.nn1.dev/", {
    method: "PUT",
    headers: {
      Authorization: `Bearer ${API_KEY_TICKETS}`,
    },
    body: JSON.stringify({
      ticketId,
      ticketToken: token,
      eventId: id,
      eventName: entry.data.name,
      eventDate: dateStartParsed,
      eventLocation: location,
      eventInviteUrlIcal: inviteUrls.iCal,
      eventInviteUrlGoogle: inviteUrls.google,
    }),
  });

  if (!response.ok) {
    throw new Error("Token validation failed.");
  }

  const responseJson:
    | { status: "success"; statusCode: number; data: any; error: null }
    | { status: "error"; statusCode: number; data: null; error: string } =
    await response.json();

  if (responseJson.error) {
    throw new Error(responseJson.error);
  }
} catch (error) {
  Sentry.captureException(error);
  return Astro.redirect("/404");
}

return Astro.redirect(`/events/${eventId}/${ticketId}`);
---
