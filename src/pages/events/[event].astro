---
import { API_KEY_TICKETS } from "astro:env/server";
import { getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Hero from "../../sections/Hero.astro";
import Container from "../../components/Container.astro";
import Gallery from "../../components/Gallery.astro";
import Profile from "../../components/Profile.astro";
import Section from "../../components/Section.astro";
import Heading from "../../components/Heading.astro";
import Input from "../../components/Input.astro";
import Button from "../../components/Button.astro";

export const prerender = false;

const { event } = Astro.params;
if (event === undefined) {
  return Astro.redirect("/404");
}

const entry = await getEntry("events", event);
if (entry === undefined) {
  return Astro.redirect("/404");
}

const {
  data: {
    id,
    name,
    description,
    dateStart,
    locationText,
    locationUrl,
    parkingText,
    parkingUrl,
    schedule,
    guests,
    images,
  },
} = entry;

const dateStartParsed = dateStart.toLocaleDateString("en-GB", {
  weekday: "long",
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
  hour: "2-digit",
  minute: "2-digit",
});

function scheduleTimeFormat(date: Date) {
  return date.toLocaleTimeString("en-GB", {
    hour: "2-digit",
    minute: "2-digit",
  });
}

// const isUpcoming = (date: Date) => new Date().getTime() < date.getTime();

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const name = data.get("name");
    const email = data.get("email");

    await fetch("https://tickets.nn1.dev/", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${API_KEY_TICKETS}`,
      },
      body: JSON.stringify({
        eventId: id,
        eventUrl: `https://nn1.dev/events/${id}/`,
        eventName: entry.data.name,
        eventDate: dateStartParsed,
        eventLocation: locationText,
        name,
        email,
      }),
    });

    return Astro.redirect(`/events/${id}/thanks`);
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout
  title={`${name} | NN1 Dev Club`}
  description={description}
  og={`${id}/og.jpg`}
>
  <Hero title={name} description={description}>
    <Button id="signup-open" text="Sign up to the event" />
  </Hero>
  <Section style="contrast">
    <Container>
      <dialog class="dialog" id="signup-dialog">
        <form class="dialog__form" method="POST">
          <Heading level={3} title="Get your free ticket" />
          <p>
            We will never sell or distribute your datato any third party at any
            time.
          </p>
          <Input type="text" name="name" label="Name" required />
          <Input type="email" name="email" label="Email" required />
          <Button id="signup-submit" text="Sign up for the event" />
        </form>
      </dialog>

      <div class="event">
        <section class="event__section">
          <Heading title="Details" level={2} anchor />
          <ul class="events__item-list">
            <li class="events__item-list-item">
              <time datetime={dateStart.toISOString()}>
                {dateStartParsed}
              </time>
            </li>
            <li class="events__item-list-item">
              <a href={locationUrl}>
                {locationText}
              </a>
            </li>
            <li class="events__item-list-item">
              <a href={parkingUrl}>
                {parkingText}
              </a>
            </li>
          </ul>
        </section>
        <section class="event__section">
          <Heading title="Schedule" level={2} anchor />
          <ul class="event__schedule">
            {
              schedule.map(({ dateStart, dateEnd, title, description }) => (
                <li class="event__schedule-item">
                  <div class="schedule__time">
                    <time datetime={dateStart.toISOString()}>
                      {scheduleTimeFormat(dateStart)}
                    </time>{" "}
                    -{" "}
                    <time datetime={dateStart.toISOString()}>
                      {scheduleTimeFormat(dateEnd)}
                    </time>
                  </div>
                  <div class="schedule__event">
                    <strong>{title}</strong>
                    {description && <p>{description}</p>}
                  </div>
                </li>
              ))
            }
          </ul>
        </section>
        <section class="event__section">
          <Heading title="Special guests" level={2} anchor />
          <div class="event__grid">
            {guests.map((dude) => <Profile {...dude} />)}
          </div>
        </section>
        {
          images?.length ? (
            <section class="event__section">
              <Heading title="Gallery" level={2} anchor />
              <Gallery images={images} />
            </section>
          ) : null
        }
      </div>
    </Container>
  </Section>
</Layout>

<style>
  .event {
    display: flex;
    flex-direction: column;
    gap: calc(var(--lh) * 4);
  }

  .event__section {
    display: flex;
    flex-direction: column;
    gap: calc(var(--lh) * 2);
  }

  .events__item-list {
    list-style: none;
  }

  .events__item-list-item {
    display: flex;
    align-items: center;
    gap: calc(var(--lh) / 2);
  }

  .event__schedule {
    list-style: none;
  }
  .event__schedule-item {
    display: flex;
    flex-direction: column;
    padding-block: calc(var(--lh) / 2);
    box-shadow: inset 0 -1px 0 0 var(--color-border);

    &:last-of-type {
      box-shadow: none;
    }

    @media (800px <= width) {
      flex-direction: row;
    }
  }

  .schedule__time {
    min-width: 20ch;
  }
  .schedule__event {
  }

  .event__grid {
    display: grid;
    gap: calc(var(--lh) * 2);

    @media (800px <= width) {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  .dialog {
    margin: auto;
    border: none;
    color: var(--color-fg);
    background-color: var(--color-bg-contrast);
    padding: var(--lh);
    border-radius: 4px;
    width: min(100% - var(--lh) * 2, 600px);
    transition:
      display 240ms allow-discrete,
      overlay 240ms allow-discrete,
      opacity 240ms;
    opacity: 0;

    @media (prefers-reduced-motion) {
      transition: unset;
    }

    &::backdrop {
      background: color-mix(in srgb, var(--color-bg), transparent 10%);
      transition:
        display 240ms allow-discrete,
        overlay 240ms allow-discrete,
        opacity 240ms;
      opacity: 0;

      @media (prefers-reduced-motion) {
        transition: unset;
      }
    }

    &[open] {
      display: flex;
      opacity: 1;

      &::backdrop {
        opacity: 1;
      }
    }

    @starting-style {
      &[open],
      &[open]::backdrop {
        opacity: 0;
      }
    }
  }

  .dialog__form {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: var(--lh);
  }

  .dialog__footnote {
    font-size: calc(var(--fz) * 0.875);
  }
</style>

<script>
  const dialog = document.getElementById("signup-dialog");
  const buttonOpen = document.getElementById("signup-open");
  const buttonClose = document.getElementById("signup-close");

  buttonOpen!.addEventListener("click", () => {
    // @ts-ignore
    dialog.showModal();
  });

  buttonClose!.addEventListener("click", () => {
    // @ts-ignore
    dialog.showModal();
  });
</script>
